lastIndexOf()
indexOf()
search()


They accept the same arguments (parameters), and return the same value?

The two methods are NOT equal. These are the differences:

The search() method cannot take a second start position argument.
The indexOf() method cannot take powerful search values (regular expressions).

slice(start, end)
substring(start, end)
substr(start, length)

If you omit the second parameter, the method will slice out the rest of the string:

substring() is similar to slice().

The difference is that substring() cannot accept negative indexes.


If the first parameter is negative, the position counts from the end of the string.

var str = "Apple, Banana, Kiwi";
var res = str.substr(-4);

The replace() method replaces a specified value with another value in a string:

By default, the replace() method replaces only the first match:

To replace case insensitive, use a regular expression with an /i flag (insensitive):

str = "Please visit Microsoft!";
var n = str.replace(/MICROSOFT/i, "W3Schools");


A string is converted to upper case with toUpperCase():

A string is converted to lower case with toLowerCase():

The concat() method can be used instead of the plus operator.
var text = "Hello" + " " + "World!";
var text = "Hello".concat(" ", "World!");

The trim() method removes whitespace from both sides of a string:

The charAt() method returns the character at a specified index (position) in a string

The charCodeAt() method returns the unicode of the character at a specified index in a string


var str = "HELLO WORLD";
str[0] = "A";             // Gives no error, but does not work
str[0];  // returns H

If you want to work with a string as an array, you can convert it to an array.

var txt = "a,b,c,d,e";   // String
txt.split(",");          // Split on commas
txt.split(" ");          // Split on spaces
txt.split("|");          // Split on pipe









